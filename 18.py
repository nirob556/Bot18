# pretty_verify_bot.py
# ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®: pip install pyTelegramBotAPI
import telebot
from telebot import types
import sqlite3
import time
from datetime import datetime

# ========== CONFIG (‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶¨‡¶∏‡¶æ‡¶ì) ==========
BOT_TOKEN = "8371666572:AAGvdLmzlEi-NEoFgSfJwli17VmQpked8-M"
# ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‚Äî public username ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá @name ‡¶¨‡¶æ numeric channel id ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã
CHANNELS = ["@vidoe66", "@vidoe55", "@vidoe88"]

# ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶π‡¶≤‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶Ø‡ßá ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá (‡¶®‡¶ø‡¶ú‡ßá ‡¶¨‡¶¶‡¶≤‡¶æ‡¶¨‡ßá)
LINK_LAYLA = "https://www.revenuecpmgate.com/i7pd0pg6?key=51e488e96a25bdded506db61a1e879c1"
LINK_OTHER = "https://www.revenuecpmgate.com/ecixkfkxp?key=e5afcf213bd677e460eaf971ad6f862a"
VIDEO_LINK_TEMPLATE = "https://www.revenuecpmgate.com/jxgvbk9x4?key=7a6c389891030baabd6368f0fcff5b3f"

# OWNER numeric telegram id (‡¶§‡ßÅ‡¶Æ‡¶ø) ‚Äî OWNER ‡¶ï‡ßá ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü admin ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
OWNER_ID = 7224513731

DB_PATH = "verified_users.db"
# ======================================================

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")


# ---------------- Database ----------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS verified (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            photo_file_id TEXT,
            verified_at INTEGER
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS admins (
            user_id INTEGER PRIMARY KEY
        )
    """)
    # OWNER ‡¶ï‡ßá admin ‡¶¨‡¶æ‡¶®‡¶æ‡¶á (ignore ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶ó‡ßá ‡¶•‡¶æ‡¶ï‡ßá)
    cur.execute("INSERT OR IGNORE INTO admins(user_id) VALUES(?)", (OWNER_ID,))
    conn.commit()
    conn.close()


def save_verified(user_id, username, first, last, photo_file_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        INSERT OR REPLACE INTO verified(user_id, username, first_name, last_name, photo_file_id, verified_at)
        VALUES(?,?,?,?,?,?)
    """, (user_id, username, first, last, photo_file_id, int(time.time())))
    conn.commit()
    conn.close()


def get_verified_all():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT user_id, username, first_name, last_name, photo_file_id, verified_at FROM verified")
    rows = cur.fetchall()
    conn.close()
    return rows


def add_admin(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO admins(user_id) VALUES(?)", (user_id,))
    conn.commit()
    conn.close()


def remove_admin(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("DELETE FROM admins WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()


def list_admins():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM admins")
    rows = [r[0] for r in cur.fetchall()]
    conn.close()
    return rows


def is_admin(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM admins WHERE user_id = ?", (user_id,))
    r = cur.fetchone()
    conn.close()
    return bool(r)


# ---------------- Utilities ----------------
def channels_join_keyboard():
    kb = types.InlineKeyboardMarkup(row_width=1)
    for ch in CHANNELS:
        # URL button ‚Äî ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶®‡¶ø‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá
        kb.add(types.InlineKeyboardButton(text=f"Join {ch}", url=f"https://t.me/{ch.lstrip('@')}"))
    # Verify button
    kb.add(types.InlineKeyboardButton(text="‚úÖ Verify", callback_data="verify_join"))
    return kb


def links_keyboard_for_user(user_id):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton(text="‡¶≤‡¶æ‡ßü‡¶≤‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï", url=LINK_LAYLA))
    kb.add(types.InlineKeyboardButton(text="‡¶ì‡¶•‡¶á ‡¶≤‡¶ø‡¶Ç‡¶ï", url=LINK_OTHER))
    kb.add(types.InlineKeyboardButton(text="‡¶ì‡¶≤ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï", url=VIDEO_LINK_TEMPLATE.format(user_id=user_id)))
    return kb


# ---------------- Handlers ----------------
@bot.message_handler(commands=['start'])
def cmd_start(m: types.Message):
    txt = ("üî• ‡¶ü‡¶ø‡¶ï‡¶ü‡¶ï‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ü•µ ‡¶≠‡¶æ‡¶á‡¶∞‡¶æ‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßá‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡ß©‡¶ü‡¶æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßã ‡¶Æ‡¶æ‡¶Æ‡¶æ ‡¶™‡ßÅ‡¶∞‡ßã ‡¶´‡¶æ‡¶ü‡¶æ‡¶´‡¶æ‡¶ü‡¶ø ‡¶≤‡¶ø‡¶Ç‡¶ïü•µ ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá ‡¶¨‡¶æ‡¶ö‡ßç‡¶ö‡¶æ‡¶¶‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶¨‡ßã üòµ‚Äçüí´‡¶è‡¶á ‡¶¨‡¶ü‡ßá‡¶á ‡•§\n\n"
           "‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‚úÖ Verify ‡¶ü‡¶ø‡¶™‡ßã ‚Äî ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶¨‡ßá‡¶® ‡¶®‡¶æü•≥‡•§")
    kb = channels_join_keyboard()
    bot.send_message(m.chat.id, txt, reply_markup=kb)


@bot.callback_query_handler(func=lambda call: call.data == "verify_join")
def callback_verify(call: types.CallbackQuery):
    user = call.from_user
    chat_id = user.id

    # ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶ö‡ßá‡¶ï
    not_member = []
    for ch in CHANNELS:
        try:
            member = bot.get_chat_member(ch, chat_id)
            status = member.status
            if status in ("left", "kicked"):
                not_member.append(ch)
        except Exception as e:
            # bot may not have access to check private channel ‚Äî treat as not member
            not_member.append(ch)

    if not_member:
        text = "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤(‡¶ó‡ßÅ‡¶≤‡ßã)-‡¶è ‡¶®‡ßá‡¶á:\n" + "\n".join(not_member)
        text += "\n\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ Verify ‡¶ö‡¶æ‡¶™‡ßã‡•§"
        # ‡¶õ‡ßã‡¶ü alert ‡¶ì edit message ‡¶ï‡¶∞‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶á
        bot.answer_callback_query(call.id, text="‡¶∏‡¶¨ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßã", show_alert=True)
        try:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=text, reply_markup=channels_join_keyboard())
        except Exception:
            pass
        return

    # ‡¶∏‡¶¨ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßá‡¶á ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶∏‡¶´‡¶≤
    try:
        # ‡¶™‡ßÅ‡¶∞‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü (‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ignore)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    except Exception:
        pass

    # ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶´‡¶ü‡ßã ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π
    photo_file_id = None
    try:
        photos = bot.get_user_profile_photos(user.id)
        if photos.total_count > 0:
            photo_file_id = photos.photos[0][-1].file_id
    except Exception:
        photo_file_id = None

    save_verified(user.id, getattr(user, "username", None), getattr(user, "first_name", ""), getattr(user, "last_name", ""), photo_file_id)

    kb = links_keyboard_for_user(user.id)
    bot.send_message(chat_id=user.id, text="‚úÖ Verification successful! ‡¶®‡¶ø‡¶ö‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã:", reply_markup=kb)


# /ck ‚Äî admin only: ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡ßü‡ßá‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
@bot.message_handler(commands=['ck'])
def cmd_ck(m: types.Message):
    uid = m.from_user.id
    if not is_admin(uid):
        bot.reply_to(m, "‚ùå ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§ (admin ‡¶õ‡¶æ‡ßú‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ)")
        return

    rows = get_verified_all()
    if not rows:
        bot.reply_to(m, "‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡ßü‡ßá‡¶° ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
        return

    bot.reply_to(m, f"üîé ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡ßü‡ßá‡¶° ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ: {len(rows)} ‚Äî ‡¶è‡¶ñ‡¶® ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶ö‡ßç‡¶õ‡¶ø...")
    for r in rows:
        user_id, username, first_name, last_name, photo_file_id, verified_at = r
        t = datetime.utcfromtimestamp(verified_at).strftime("%Y-%m-%d %H:%M:%S (UTC)")
        txt = (f"ID: <code>{user_id}</code>\n"
               f"‡¶®‡¶æ‡¶Æ: {first_name} {last_name}\n"
               f"Username: @{username if username else '-'}\n"
               f"Verified at: {t}")
        try:
            if photo_file_id:
                bot.send_photo(m.chat.id, photo=photo_file_id, caption=txt)
            else:
                bot.send_message(m.chat.id, txt)
        except Exception:
            bot.send_message(m.chat.id, txt)


# /admin <user_id> ‚Äî OWNER only: ‡¶®‡¶§‡ßÅ‡¶® admin ‡¶Ø‡ßã‡¶ó
@bot.message_handler(commands=['admin'])
def cmd_admin(m: types.Message):
    if m.from_user.id != OWNER_ID:
        bot.reply_to(m, "‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ OWNER ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§")
        return

    parts = m.text.strip().split()
    if len(parts) != 2:
        bot.reply_to(m, "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /admin <user_id>")
        return

    try:
        new_admin_id = int(parts[1])
    except ValueError:
        bot.reply_to(m, "‡¶∏‡¶†‡¶ø‡¶ï numeric user_id ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§")
        return

    add_admin(new_admin_id)
    bot.reply_to(m, f"‚úÖ User <code>{new_admin_id}</code> ‡¶ï‡ßá admin ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã‡•§")


# /removeadmin <user_id> ‚Äî OWNER only: admin ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠
@bot.message_handler(commands=['removeadmin'])
def cmd_remove_admin(m: types.Message):
    if m.from_user.id != OWNER_ID:
        bot.reply_to(m, "‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ OWNER ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§")
        return

    parts = m.text.strip().split()
    if len(parts) != 2:
        bot.reply_to(m, "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /removeadmin <user_id>")
        return

    try:
        rem_id = int(parts[1])
    except ValueError:
        bot.reply_to(m, "‡¶∏‡¶†‡¶ø‡¶ï numeric user_id ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§")
        return

    if rem_id == OWNER_ID:
        bot.reply_to(m, "OWNER ‡¶®‡¶ø‡¶ú‡ßá‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§")
        return

    if not is_admin(rem_id):
        bot.reply_to(m, f"User <code>{rem_id}</code> ‡¶è‡¶ñ‡¶®‡ßã admin ‡¶®‡ßü‡•§", parse_mode="HTML")
        return

    remove_admin(rem_id)
    bot.reply_to(m, f"‚úÖ User <code>{rem_id}</code> ‡¶ï‡ßá admin ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡ßü‡¶æ ‡¶π‡¶≤‡ßã‡•§", parse_mode="HTML")


# /listadmins ‚Äî ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
@bot.message_handler(commands=['listadmins'])
def cmd_list_admins(m: types.Message):
    admins = list_admins()
    if not admins:
        bot.reply_to(m, "‡¶ï‡ßã‡¶®‡ßã admin ‡¶®‡¶æ‡¶á‡•§")
        return
    text = "üîê Admins:\n" + "\n".join([f"- <code>{a}</code>" for a in admins])
    bot.reply_to(m, text, parse_mode="HTML")


# /help
@bot.message_handler(commands=['help'])
def cmd_help(m: types.Message):
    help_text = (
        "/start ‚Äî ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ\n"
        "/ck ‚Äî ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡ßü‡ßá‡¶° ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ (admin only)\n"
        "/listadmins ‚Äî admin ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ\n"
        "/admin <user_id> ‚Äî OWNER ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ admin ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã\n"
        "/removeadmin <user_id> ‚Äî OWNER ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ admin ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ\n"
    )
    bot.reply_to(m, help_text)


# Catch-all for safety
@bot.message_handler(func=lambda m: True)
def fallback(m: types.Message):
    # ‡¶ñ‡ßÅ‡¶¨ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶π‡¶≤‡ßá ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶¶‡¶ø‡¶§‡ßá‡¶æ, ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶®‡¶ø‡¶ü‡ßç‡¶∞‡¶æ‡¶≤ ‡¶∞‡ßá‡¶ñ‡ßá‡¶õ‡¶ø
    pass


# ---------------- Main ----------------
if __name__ == "__main__":
    init_db()
    print("Bot is running...")
    try:
        bot.infinity_polling(timeout=60, long_polling_timeout = 60)
    except KeyboardInterrupt:
        print("Stopped by user")
    except Exception as e:
        print("Bot crashed:", e)