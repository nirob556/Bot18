# pretty_verify_bot.py
# ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®: pip install pyTelegramBotAPI

import telebot
from telebot import types
import sqlite3
import time
from datetime import datetime

# ========== CONFIG ==========
BOT_TOKEN = "8371666572:AAGvdLmzlEi-NEoFgSfJwli17VmQpked8-M"
CHANNELS = ["@vidoe66", "@vidoe55", "@vidoe88"]  # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤
LINK_LAYLA = "https://www.revenuecpmgate.com/jxgvbk9x4?key=7a6c389891030baabd6368f0fcff5b3f"
LINK_OTHER = "https://www.revenuecpmgate.com/ecixkfkxp?key=e5afcf213bd677e460eaf971ad6f862a"
VIDEO_LINK_TEMPLATE = "https://www.revenuecpmgate.com/i7pd0pg6?key=51e488e96a25bdded506db61a1e879c1"

OWNER_ID = 7224513731
DB_PATH = "verified_users.db"

# Verified ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶á‡¶®‡¶´‡¶∞‡¶Æ‡ßá‡¶∂‡¶® ‡¶Ø‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá
LOG_GROUP_ID = -1002780174909   # <-- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¨‡¶∏‡¶æ‡¶ì

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# ---------------- Database ----------------

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS verified (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        photo_file_id TEXT,
        verified_at INTEGER
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS admins (
        user_id INTEGER PRIMARY KEY
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS channels (
        channel_username TEXT PRIMARY KEY
    )
    """)
    cur.execute("INSERT OR IGNORE INTO admins(user_id) VALUES(?)", (OWNER_ID,))
    # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü
    for ch in CHANNELS:
        cur.execute("INSERT OR IGNORE INTO channels(channel_username) VALUES(?)", (ch,))
    conn.commit()
    conn.close()

def save_verified(user_id, username, first, last, photo_file_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
    INSERT OR REPLACE INTO verified(user_id, username, first_name, last_name, photo_file_id, verified_at)
    VALUES(?,?,?,?,?,?)
    """, (user_id, username, first, last, photo_file_id, int(time.time())))
    conn.commit()
    conn.close()

def get_verified_all():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT user_id, username, first_name, last_name, photo_file_id, verified_at FROM verified")
    rows = cur.fetchall()
    conn.close()
    return rows

def add_admin(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO admins(user_id) VALUES(?)", (user_id,))
    conn.commit()
    conn.close()

def remove_admin(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("DELETE FROM admins WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def list_admins():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM admins")
    rows = [r[0] for r in cur.fetchall()]
    conn.close()
    return rows

def is_admin(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM admins WHERE user_id = ?", (user_id,))
    r = cur.fetchone()
    conn.close()
    return bool(r)

def get_channels():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT channel_username FROM channels")
    rows = [r[0] for r in cur.fetchall()]
    conn.close()
    return rows

def add_channel(ch):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO channels(channel_username) VALUES(?)", (ch,))
    conn.commit()
    conn.close()

def remove_channel(ch):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("DELETE FROM channels WHERE channel_username = ?", (ch,))
    conn.commit()
    conn.close()

# ---------------- Utilities ----------------

def channels_join_keyboard():
    kb = types.InlineKeyboardMarkup(row_width=1)
    for ch in get_channels():
        kb.add(types.InlineKeyboardButton(text=f"Join {ch}", url=f"https://t.me/{ch.lstrip('@')}"))
    kb.add(types.InlineKeyboardButton(text="‚úÖ Verify", callback_data="verify_join"))
    return kb

def links_keyboard_for_user(user_id):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton(text="‡¶≤‡¶æ‡ßü‡¶≤‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï", url=LINK_LAYLA))
    kb.add(types.InlineKeyboardButton(text="‡¶ì‡¶•‡¶á ‡¶≤‡¶ø‡¶Ç‡¶ï", url=LINK_OTHER))
    kb.add(types.InlineKeyboardButton(text="‡¶ì‡¶≤ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï", url=VIDEO_LINK_TEMPLATE.format(user_id=user_id)))
    return kb

def log_to_group(user, action="started"):
    """Owner group-‡¶è ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶á‡¶®‡¶´‡ßã ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá"""
    try:
        photo_file_id = None
        photos = bot.get_user_profile_photos(user.id)
        if photos.total_count > 0:
            photo_file_id = photos.photos[0][-1].file_id
    except Exception:
        pass

    txt = (f"üë§ User {action}\n"
           f"ID: <code>{user.id}</code>\n"
           f"Name: {user.first_name} {user.last_name or ''}\n"
           f"Username: @{user.username or '-'}\n"
           f"Time: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}")
    try:
        if photo_file_id:
            bot.send_photo(LOG_GROUP_ID, photo=photo_file_id, caption=txt)
        else:
            bot.send_message(LOG_GROUP_ID, txt)
    except Exception as e:
        print("log_to_group error:", e)

# ---------------- Handlers ----------------

@bot.message_handler(commands=['start'])
def cmd_start(m: types.Message):
    txt = ("üî• ‡¶ü‡¶ø‡¶ï‡¶ü‡¶ï‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ü•µ ‡¶≠‡¶æ‡¶á‡¶∞‡¶æ‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßá‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡ß©‡¶ü‡¶æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßã ‡¶Æ‡¶æ‡¶Æ‡¶æ ‡¶™‡ßÅ‡¶∞‡ßã ‡¶´‡¶æ‡¶ü‡¶æ‡¶´‡¶æ‡¶ü‡¶ø ‡¶≤‡¶ø‡¶Ç‡¶ïü•µ ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá ‡¶¨‡¶æ‡¶ö‡ßç‡¶ö‡¶æ‡¶¶‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶¨‡ßã üòµ‚Äçüí´‡¶è‡¶á ‡¶¨‡¶ü‡ßá‡¶á ‡•§\n\n"
           "‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‚úÖ Verify ‡¶ü‡¶ø‡¶™‡ßã ‚Äî ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶¨‡ßá‡¶® ‡¶®‡¶æü•≥")
    kb = channels_join_keyboard()
    bot.send_message(m.chat.id, txt, reply_markup=kb)
    log_to_group(m.from_user, action="started bot")

@bot.callback_query_handler(func=lambda call: call.data == "verify_join")
def callback_verify(call: types.CallbackQuery):
    user = call.from_user
    chat_id = user.id

    try:
        bot.answer_callback_query(call.id, text="‚è≥ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...", show_alert=False)
    except Exception as e:
        print("answer_callback_query error:", e)

    not_member = []
    for ch in get_channels():
        try:
            member = bot.get_chat_member(ch, chat_id)
            if member.status in ("left", "kicked"):
                not_member.append(ch)
        except Exception:
            not_member.append(ch)

    if not_member:
        text = "‚ùå ‡¶è‡¶ñ‡¶®‡ßã ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶®‡¶ø:\n" + "\n".join(not_member)
        text += "\n\nüëâ ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ Verify ‡¶ö‡¶æ‡¶™‡ßã‡•§"
        try:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=text,
                                  reply_markup=channels_join_keyboard())
        except Exception as e:
            print("edit_message error:", e)
        return

    try:
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    except Exception:
        pass

    photo_file_id = None
    try:
        photos = bot.get_user_profile_photos(user.id)
        if photos.total_count > 0:
            photo_file_id = photos.photos[0][-1].file_id
    except Exception:
        pass

    save_verified(user.id, getattr(user, "username", None),
                  getattr(user, "first_name", ""), getattr(user, "last_name", ""),
                  photo_file_id)

    kb = links_keyboard_for_user(user.id)
    bot.send_message(chat_id=user.id, text="‚úÖ Verification successful! ‡¶®‡¶ø‡¶ö‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã:", reply_markup=kb)

    # group log
    log_to_group(user, action="verified")

@bot.message_handler(commands=['ck'])
def cmd_ck(m: types.Message):
    if not is_admin(m.from_user.id):
        bot.reply_to(m, "‚ùå ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡¶æ‡¶á‡•§")
        return
    rows = get_verified_all()
    if not rows:
        bot.reply_to(m, "‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡ßü‡ßá‡¶° ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶®‡¶æ‡¶á‡•§")
        return
    bot.reply_to(m, f"üîé ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡ßü‡ßá‡¶° ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ: {len(rows)}")
    for r in rows:
        user_id, username, first_name, last_name, photo_file_id, verified_at = r
        t = datetime.utcfromtimestamp(verified_at).strftime("%Y-%m-%d %H:%M:%S UTC")
        txt = (f"ID: <code>{user_id}</code>\n"
               f"‡¶®‡¶æ‡¶Æ: {first_name} {last_name}\n"
               f"Username: @{username if username else '-'}\n"
               f"Verified at: {t}")
        try:
            if photo_file_id:
                bot.send_photo(m.chat.id, photo=photo_file_id, caption=txt)
            else:
                bot.send_message(m.chat.id, txt)
        except Exception as e:
            print("send user info error:", e)

@bot.message_handler(commands=['admin'])
def cmd_admin(m: types.Message):
    if m.from_user.id != OWNER_ID:
        bot.reply_to(m, "‡¶∂‡ßÅ‡¶ß‡ßÅ OWNER ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§")
        return
    parts = m.text.strip().split()
    if len(parts) != 2:
        bot.reply_to(m, "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /admin <user_id>")
        return
    try:
        new_admin_id = int(parts[1])
    except ValueError:
        bot.reply_to(m, "‡¶∏‡¶†‡¶ø‡¶ï numeric user_id ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§")
        return
    add_admin(new_admin_id)
    bot.reply_to(m, f"‚úÖ User <code>{new_admin_id}</code> ‡¶ï‡ßá admin ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã‡•§")

@bot.message_handler(commands=['removeadmin'])
def cmd_remove_admin(m: types.Message):
    if m.from_user.id != OWNER_ID:
        bot.reply_to(m, "‡¶∂‡ßÅ‡¶ß‡ßÅ OWNER ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§")
        return
    parts = m.text.strip().split()
    if len(parts) != 2:
        bot.reply_to(m, "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /removeadmin <user_id>")
        return
    try:
        rem_id = int(parts[1])
    except ValueError:
        bot.reply_to(m, "‡¶∏‡¶†‡¶ø‡¶ï numeric user_id ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§")
        return
    if rem_id == OWNER_ID:
        bot.reply_to(m, "OWNER ‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§")
        return
    if not is_admin(rem_id):
        bot.reply_to(m, f"User <code>{rem_id}</code> admin ‡¶®‡ßü‡•§")
        return
    remove_admin(rem_id)
    bot.reply_to(m, f"‚úÖ User <code>{rem_id}</code> ‡¶ï‡ßá admin ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡ßü‡¶æ ‡¶π‡¶≤‡ßã‡•§")

@bot.message_handler(commands=['listadmins'])
def cmd_list_admins(m: types.Message):
    admins = list_admins()
    if not admins:
        bot.reply_to(m, "‡¶ï‡ßã‡¶®‡ßã admin ‡¶®‡¶æ‡¶á‡•§")
        return
    text = "üîê Admins:\n" + "\n".join([f"- <code>{a}</code>" for a in admins])
    bot.reply_to(m, text)

# Owner-only channel management
@bot.message_handler(commands=['addchannel'])
def cmd_addchannel(m: types.Message):
    if m.from_user.id != OWNER_ID:
        return
    parts = m.text.strip().split()
    if len(parts) != 2:
        bot.reply_to(m, "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /addchannel <@channel>")
        return
    ch = parts[1]
    add_channel(ch)
    bot.reply_to(m, f"‚úÖ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ {ch} ‡¶è‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã‡•§")

@bot.message_handler(commands=['removechannel'])
def cmd_removechannel(m: types.Message):
    if m.from_user.id != OWNER_ID:
        return
    parts = m.text.strip().split()
    if len(parts) != 2:
        bot.reply_to(m, "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /removechannel <@channel>")
        return
    ch = parts[1]
    remove_channel(ch)
    bot.reply_to(m, f"‚úÖ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ {ch} ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã‡•§")

@bot.message_handler(commands=['help'])
def cmd_help(m: types.Message):
    if m.from_user.id == OWNER_ID:
        help_text = (
            "/start ‚Äî ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ\n"
            "/ck ‚Äî ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡ßü‡ßá‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü (admin only)\n"
            "/listadmins ‚Äî admin ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ\n"
            "/admin <user_id> ‚Äî admin ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã (OWNER only)\n"
            "/removeadmin <user_id> ‚Äî admin ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ (OWNER only)\n"
            "/addchannel <@channel> ‚Äî ‡¶®‡¶§‡ßÅ‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ø‡ßã‡¶ó (OWNER only)\n"
            "/removechannel <@channel> ‚Äî ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ (OWNER only)\n"
        )
    else:
        help_text = (
            "/start ‚Äî ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ\n"
            "/ck ‚Äî ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡ßü‡ßá‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü (admin only)\n"
            "/listadmins ‚Äî admin ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ\n"
        )
    bot.reply_to(m, help_text)

@bot.message_handler(func=lambda m: True)
def fallback(m: types.Message):
    pass

# ---------------- Main ----------------
if __name__ == "__main__":
    init_db()
    print("Bot is running...")
    while True:
        try:
            bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            print("Polling error:", e)
            time.sleep(3)
